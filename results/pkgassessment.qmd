---
title: "Package assessments"
editor_options:
  markdown:
    wrap: 72
execute:
  echo: false
  message: false
  warning: false
format: 
  html: default
  sctotypst-typst: default
integral: "false"
format-links:
  - html
  - format: sctotypst-typst
    text: PDF
    icon: file-pdf
    target: "_blank"
---

:::{.callout-note}
This page currently requires manually rebuilding the site to show the newest packages. It was last built at `r format(Sys.time(), format = "%Y-%m-%d %H:%M:%S")`.
:::

```{r}
#| message: false
# install.packages('SCTORvalidation', 
#                  repos = c('https://ctu-bern.r-universe.dev', 
#                            'https://cloud.r-project.org'), 
#                  quiet = TRUE, verbose = FALSE)
library(SCTORvalidation)
library(gtExtras)
library(purrr)
library(dplyr)
pkgs <- load_pkg_table()

tests <- load_tests_table() |> 
  mutate(test_tab = NA,
         test_result = if_else(test_result == "PASS", 1, 0)) |> 
  summarize(max = max(test_result), 
            min = min(test_result),
            .by = c(package, version)) |> 
  mutate(test_result = case_when(max == 1 & min == 1 ~ "Pass", 
                                 max == 1 & min == 0 ~ "Mixed results", 
                                 max == 0 & min == 0 ~ "Fail",
                                 TRUE ~ "Untested"
                                 ))

tests_available <- data.frame(package = get_tested_pkgs()) |> 
  mutate(tests_available = file.path("https://www.github.com", 
                                     sctotests(), "tree/main/tests", package, "info.txt"),
         testing = TRUE)
  
  

# library(purrr)

# funs <- map_dfr(1:nrow(tests), function(x) {
#   row <- tests |> slice(x)
#   tab <- row |> pull(test_evidence) |> parse_evidence_tab()
#   tab |>  mutate(issue_num = row$issue_num)
#   
# })
# 
# fun_summary <- funs |> 
#   summarize(
#     functions = paste(unique(context), collapse = ", "),
#     .by = c(issue_num)
#   ) |> 
#   left_join(tests) |> 
#   select(package, version, functions, test_result) |> 
#   distinct()
  
```

`r nrow(pkgs)` packages or package versions have been risk assessed within the SCTO Statistics & Methodology Platform so far.

```{r}
tmp <- pkgs |> 
  rowwise() |> 
  mutate(url = gt_hyperlink(text = "View on GitHub", url = issue_url),
         url = purrr::map(url, html),
         # tests_available = package %in% tests_available, 
         # tests_available = if_else(tests_available, "Yes", "No"), 
         ) |> 
  left_join(tests_available) |> 
  # left_join(fun_summary |> #names()
  #             mutate(url = purrr::map2(functions, issue_url, 
  #                                      ~ gt_hyperlink(text = .x, url = .y)),
  #                    functions = purrr::map(url, html)) |> 
  #             select(package, version, functions, test_result)) |> # View()
  select(package, version, final_score, final_score_cat, url, tests_available, testing
         # functions, test_result
         ) |> 
  left_join(tests |> select(package, version, test_result)) |> 
  mutate(
    tests_available = gt_hyperlink(text = if_else(!sapply(tests_available, is.null), "View tests", ""), url = tests_available),
    tests_available = ifelse(testing, tests_available, " "),
    tests_available = purrr::map(tests_available, html)
    # test_result = if_else(is.na(test_result), " ", test_result)
    ) |> 
  select(-testing)

risks <- unique(tmp$final_score_cat)
full_palette <- c(Low = "#91cf60", Medium = "#ffffbf", High = "#fc8d59")
observed_palette <- full_palette[risks]
test_res <- unique(tmp$test_result) |> na.omit()
tests_palette <- c(PASS = "#91cf60", "FAIL" = "#fc8d59", " " = "white")
tests_observed <- tests_palette[test_res]

# library(ggplot2)
# plot_risk <- function(final_score){
#   # tmp |> filter(
#   #   issue_num == issuenum
#   #   ) |> 
#   data.frame(y = as.numeric(final_score), 
#               x = 1) |> 
#     ggplot(aes(y = y, x = 1, fill = y)) + 
#     geom_hline(aes(yintercept = 1)) +
#     geom_hline(aes(yintercept = 0)) +
#     geom_hline(aes(yintercept = .25)) +
#     geom_hline(aes(yintercept = .75)) +
#     geom_bar(stat = "identity") + 
#     coord_flip() +
#     ylim(0, 1) +
#     theme_void() +
#     # theme(axis.text.x = element_text()) +
#     scale_fill_gradientn(colours = c("#91cf60", "#ffffbf", "#fc8d59"), guide = FALSE, limits = c(0, 1))
# }
# abbrev_text <- function(x) {
#   paste0(
#     "<div style=\"display:table;table-layout:fixed;width:100%;\">",
#     "<div title=\"", x , "\", ", # `<p>` has been changed to `<div>` here
#     "style=\"overflow-x:hidden;text-overflow:ellipsis;white-space:nowrap\">",
#     x,
#     "</div>",
#     "</div>"
#   )
# }

# plot_risk(.5)
# plot_risk(.25)
# plot_risk(.1)
# plot_risk(.99)

pkgdf <- tmp |> 
  gt() |> 
  cols_label(package = "Package",
             version = "Version",
             final_score = "Package Risk",
             final_score_cat = "Package Risk",
             url = "Assessment link",
             tests_available = "Tests available",
             # functions = "Functions tested",
             test_result = "Test results"
             ) |> 
  # harmonize table font to quarto default
  opt_table_font(font = "Source Sans Pro") |> 
  # data_color(final_score_cat, palette = c("#91cf60", "#ffffbf", "#fc8d59")) |> 
  # gt_plt_bar(final_score, scale_type = "number") |> 
  gt_badge(final_score_cat, 
           palette = observed_palette, alpha = 1) |> 
  # gt_badge(test_result, 
  #          palette = tests_observed, alpha = 1) |> 
  sub_missing(missing_text = "") |> 
  cols_align("left") |> 
  fmt_number(columns = final_score, decimals = 2) 
  # text_transform(
  #   locations = cells_body(columns = 'final_score'),
  #   fn = function(column) {
  #     map(column, plot_risk) |>
  #       ggplot_image(height = px(40), aspect_ratio = 1)
  #   }
  # )
```



```{r }
#| eval: !expr knitr::is_html_output()
pkgdf |> 
  opt_interactive(use_filters = TRUE,
                  use_sorting = FALSE)
```

```{r}
#| eval: !expr knitr::is_html_output() == FALSE
pkgdf |> 
  tab_options(table.font.size = 10)
```


```{r}
# Check for updates of installed packages
# pkgs <- load_pkg_table()
# installed_packages <- installed.packages() |> as.data.frame()
available_packages <- available.packages(contriburl = contrib.url("https://cran.rstudio.com")) |> 
  as.data.frame()
outdated_pkgs <- pkgs |> 
  dplyr::summarize(version = max(version), .by = package) |> 
  dplyr::left_join(available_packages, by = dplyr::join_by("package" == "Package")) |> #View()
  dplyr::filter(version < Version) |> 
  dplyr::select(package, version, Version) |> 
  dplyr::rename(Package = package,
         `Risk assessed version` = version,
         `Available version` = Version
         )
```


# Packages with potentially outdated risk assessments:

```{r }
#| eval: !expr knitr::is_html_output()
outdated_pkgs |> 
  gt() |> 
  opt_interactive(use_filters = TRUE,
                  use_sorting = TRUE) |> 
  opt_table_font(font = "Source Sans Pro") 
```

```{r}
#| eval: !expr knitr::is_html_output() == FALSE
outdated_pkgs |> 
  gt() |> 
  tab_options(table.font.size = 10) |> 
  opt_table_font(font = "Source Sans Pro") 
```

